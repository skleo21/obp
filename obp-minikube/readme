# Open Banking Project on Minikube

This project demonstrates how to deploy Open Banking Project (OBP) on Minikube with persistent storage, monitoring, and CI/CD integration.

## Project Structure

- `/k8s`: Kubernetes configuration files
- `/docker`: Docker configuration and build files
- `/ci-cd`: CI/CD pipeline configurations
- `/scripts`: Utility scripts
- `/monitoring`: Monitoring configuration
- `/tests`: Test scripts and files

## Prerequisites

- Docker
- Minikube
- kubectl
- Python 3.x (for running tests)

## Getting Started

1. Setup Minikube cluster:

    ```bash
    ./scripts/setup_minikube.sh
    ```

2. Deploy using one of these methods:

    **Option 1: Manual deployment with locally built image:**

    ```bash
    ./scripts/manual_deployment.sh
    ```

    **Option 2: Deployment using image from GitHub Container Registry:**

    ```bash
    # Deploy the latest image
    ./scripts/deploy_from_ghcr.sh obp-dev YOUR_GITHUB_USERNAME latest
    
    # Or deploy a specific version by commit SHA
    ./scripts/deploy_from_ghcr.sh obp-dev YOUR_GITHUB_USERNAME abc123def
    ```

    **Option 3: Automatic deployment watcher:**
    
    ```bash
    # Start the watcher script to automatically deploy new images
    ./scripts/auto_deploy_watch.sh YOUR_GITHUB_USERNAME obp-dev
    ```

3. Setup monitoring integration:

    ```bash
    ./scripts/setup_monitoring.sh obp-dev
    ```

## CI/CD Workflow

This project uses a CI/CD approach where:

1. **CI (Continuous Integration)**: GitHub Actions automatically builds and pushes the Docker image to GitHub Container Registry on every commit.

2. **CD (Continuous Deployment)**: You can deploy the image to your local Minikube either manually or using the auto-deployment watcher.

The GitHub Actions workflow:
- Builds the Docker image in the cloud
- Pushes it to GitHub Container Registry (GHCR)
- Tags it with both the commit SHA and 'latest'
- Runs automated tests

Local deployment:
- Pulls the image from GHCR
- Updates Kubernetes resources
- Applies the changes to your Minikube cluster

## Comparing CI/CD vs Manual Deployment

1. Run performance tests on both deployments:

    ```bash
    # Test CI/CD deployment
    API_URL=http://obp-cicd.local python tests/performance_test.py
    mv performance_results.csv cicd_results.csv
    
    # Test manual deployment
    API_URL=http://obp-manual.local python tests/performance_test.py
    mv performance_results.csv manual_results.csv
    ```

2. Generate comparison report:

    ```bash
    python scripts/compare_deployments.py --cicd=cicd_results.csv --manual=manual_results.csv --output=comparison_results
    ```

3. View the results in the `comparison_results` directory.

## Testing

To run the API tests:

```bash
python -m pytest tests/api_tests.py -v
```

## Monitoring

Access Grafana dashboards to monitor the OBP deployment:
1. Open the Grafana URL: `http://$(minikube ip):30000` (default credentials: admin/admin)
2. Navigate to the "OBP API Dashboard" in the dashboards list

## Project Goals

This project aims to:
1. Compare CI/CD vs manual deployments for Open Banking Platform
2. Test scaling and failure tolerance
3. Evaluate performance metrics
4. Provide persistent storage for data and logs